# Scaffolding generated by Casein v5.1.1.5

module Casein
  class MenusController < Casein::CaseinController
    before_filter :load_menu, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Menus'
      @menus = Menu.all
      @menu = Menu.new
      @pages = Page.published_now.order(:title)
      @course_formats = Courseformat.published_now
    end
  
    def show
      @casein_page_title = 'View menu'
    end
  
    def new
      @casein_page_title = 'Add a new menu'
      @menu = Menu.new
    end

    def create
      
      @pages = Page.where(id: params[:page_ids])

      @pages.each do |page|
        @menu = page.menus.create(menu_params)
        @menu.update_attribute(:name, page.title)
          expire_fragment("footer")
          expire_fragment("header")
      end

      flash[:notice] = 'Menu created'
      redirect_to casein_menus_path
    end
  
    def update
      @casein_page_title = 'Update menu'
      
      if @menu.update_attributes menu_params    
          expire_fragment("footer")
          expire_fragment("header")
        render :text => 'Menu has been updated'
      else
        flash.now[:warning] = 'There were problems when trying to update this menu'
        render :action => :show
      end

    end
    
    def edit_multiple
      @menus = Menu.where(id: menu_params[:menu_ids])

      if params[:edit]
        render "menus/edit_multiple"
      elsif params[:unpublish]
        @menus.each do |menu|
          menu.unpublish! if menu.published?
        end
        redirect_to casein_menus_path
      elsif params[:publish]
        @menus.each do |menu|
          menu.publish! if !menu.published?
        end
          redirect_to casein_menus_path
      elsif params[:delete]
          @menus.destroy_all
          redirect_to casein_menus_path
      end
    end

    def update_multiple
      @menus = Menu.friendly.update(params[:menus].keys, params[:menus].values)
      expire_fragment("footer")
      expire_fragment("header")
      @menus.reject! { |menu| menu.errors.empty? }
      if @menus.empty?
        redirect_to casein_menus_path
      else
        render "menus/edit_multiple"
      end
    end
 
    def destroy

      @menu.destroy
      expire_fragment("footer")
      expire_fragment("header")
      flash[:notice] = 'Menu has been deleted.'
      redirect_to casein_menus_path
    end
  
    private
      
      def menu_params
        params.require(:menu).permit(:name, :parent_id, :menus, {:page_ids =>[]}, :menu_type, {:menu_ids => []}, :row_order_position)
      end
      
      def load_menu
        @menu = Menu.find params[:id]
      end
  
  end
end
