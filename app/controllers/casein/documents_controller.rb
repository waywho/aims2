# Scaffolding generated by Casein v5.1.1.5

module Casein
  class DocumentsController < Casein::CaseinController
    before_filter :load_document, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Documents'
      @documents = Document.order(sort_order(:caption)).paginate :page => params[:page]
    end
  
    def show
      @casein_page_title = 'View document'
    end
  
    def new
      @casein_page_title = 'Add a new document'
      @document = Document.new
    end

    def create
      @document = Document.new document_params
    
      if @document.save
        flash[:notice] = 'Document created'
        redirect_to casein_documents_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new document'
        render :action => :new
      end
    end

    def insert_file
       @document = Document.new document_params
    
      if @document.save
        respond_to do |format|
          format.json { render json: { :link => casein_document_path(@document)} }
        end
      else
        flash.now[:warning] = 'There were problems when trying to create a new document'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update document'
      
      respond_to do |format|

          if @document.update_attributes document_params
  
          format.html { redirect_to casein_document_path(@document), notice: "Document has been updated."}
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this document'
          render :action => :show
        end
      end
    end
    
    def edit_multiple
      @documents = Document.where(id: document_params[:document_ids])

      if params[:edit]
        render "documents/edit_multiple"
      elsif params[:delete]
          @documents.destroy_all
          redirect_to casein_documents_path
      end
    end

    def update_multiple
     @documents = Document.friendly.update(params[:documents].keys, params[:documents].values)
      @documents.reject! { |document| document.errors.empty? }
      if @documents.empty?
        redirect_to casein_documents_path
      else
        render "documents/edit_multiple"
      end
    end
 
    def destroy

      @document.destroy
      flash[:notice] = "Document has been deleted."
      redirect_to casein_documents_path
    end
  
    private
      
      def document_params
        params.require(:document).permit(:caption, :description, :file)
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@document.versions.last), :method => :post).html_safe
      end
      
      def load_document
        @document = Document.find params[:id]
      end
  
  end
end
