# Scaffolding generated by Casein v5.1.1.5

module Casein
  class FaqsController < Casein::CaseinController
    before_filter :load_faq, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Faqs'
      @faqs = Faq.order(sort_order(:question)).paginate :page => params[:page]      
      respond_to do |format|
        format.html
        format.csv { send_data @faqs.to_csv, filename: "faqs-#{Date.today}.csv"}
        format.xlsx
      end
    end
  
    def show
      @casein_page_title = 'View faq'
    end
  
    def new
      @casein_page_title = 'Add a new faq'
      @faq = Faq.new
    end

    def create
      @faq = Faq.new faq_params
    
      if @faq.save
        flash[:notice] = 'Faq created'
        redirect_to casein_faqs_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new faq'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update faq'
      
      respond_to do |format|
      if @faq.update_attributes faq_params
        if params[:submit]
            @faq.submit!
          elsif params[:approve]
            @faq.approve!
          elsif params[:reject]
            @faq.reject!
          elsif params[:publish]
            @faq.publish!
          elsif params[:unpublish]
            @faq.unpublish!
          end
        
          format.html { redirect_to casein_faq_path(@faq), notice: "Faq has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this faq'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @faqs = Faq.where(id: faq_params[:faq_ids])

      if params[:edit]
        render "faqs/edit_multiple"
      elsif params[:unpublish]
        @faqs.each do |faq|
          faq.unpublish! if faq.published?
        end
        redirect_to casein_faqs_path
      elsif params[:publish]
        @faqs.each do |faq|
          faq.publish! if !faq.published?
        end
          redirect_to casein_faqs_path
      elsif params[:delete]
          @faqs.destroy_all
          redirect_to casein_faqs_path
      end
    end

    def update_multiple
     @faqs = Faq.friendly.update(params[:faqs].keys, params[:faqs].values)
      @faqs.reject! { |faq| faq.errors.empty? }
      if @faqs.empty?
        redirect_to casein_faqs_path
      else
        render "faqs/edit_multiple"
      end
    end
 
    def destroy
      @faq.destroy
      flash[:notice] = 'Faq has been deleted. #{undo_link}"'
      redirect_to casein_faqs_path
    end
  
    private
      
      def faq_params
        params.require(:faq).permit(:question, :answer, :published_at, :updated_at, :workflow_state)
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@faq.versions.last), :method => :post).html_safe
      end
      
      def load_faq
        @faq = Faq.find params[:id]
      end
  
  end
end
