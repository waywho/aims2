# Scaffolding generated by Casein v5.1.1.5

module Casein
  class CourseformatsController < Casein::CaseinController
    before_filter :load_courseformat, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Course formats'
      @courseformats = Courseformat.rank(:row_order)
    end
  
    def show
      @casein_page_title = 'View course format'
      @photos = Photo.all
      @photo = Photo.new
      @courseformat.highlights.build
    end
  
    def new
      @casein_page_title = 'Add a new course format'
      @courseformat = Courseformat.new
      @photo = @courseformat.photos.build
      3.times { @courseformat.highlights.build }
    end

    def create
      @courseformat = Courseformat.new courseformat_params
    
      if @courseformat.save

        if params[:photos_attributes]
          params[:photos_attributes]['image'].each do |image|
            @courseformat.photos.create(image: image)
          end
        end
        flash[:notice] = 'Course format created'
        redirect_to casein_courseformats_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new course format'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update course format'
      
      respond_to do |format|
        if @courseformat.update_attributes courseformat_params
          if params[:submit]  
            @courseformat.submit!
          elsif params[:approve]
            @courseformat.approve!
          elsif params[:reject]
            @courseformat.reject!
          elsif params[:publish]
            @courseformat.publish!
          elsif params[:unpublish]
            @courseformat.unpublish!
          end
        
          format.html { redirect_to casein_courseformat_path(@courseformat), notice: "Course Format has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this course format'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @courseformats = Courseformat.where(id: courseformat_params[:courseformat_ids])

      if params[:edit]
        render "courseformats/edit_multiple"
      elsif params[:unpublish]
        @courseformats.each do |courseformat|
          courseformat.unpublish! if courseformat.published?
        end
        redirect_to casein_courseformats_path
      elsif params[:publish]
        @courseformats.each do |courseformat|
          courseformat.publish! if !courseformat.published?
        end
          redirect_to casein_courseformats_path
      elsif params[:delete]
          @courseformats.destroy_all
          redirect_to casein_courseformats_path
      end
    end

    def update_multiple
     @courseformats = Courseformat.friendly.update(params[:courseformats].keys, params[:courseformats].values)
      @courseformats.reject! { |courseformat| courseformat.errors.empty? }
      if @courseformats.empty?
        redirect_to casein_courseformats_path
      else
        render "courseformats/edit_multiple"
      end
    end
 
    def destroy

      @courseformat.destroy
      @courseformat.photos.each do |photo|
        photo.update_attributes(imageable_id: nil, imageable_type: nil)
      end
      flash[:notice] = 'Course format has been deleted. #{undo_link}"'
      redirect_to casein_courseformats_path
    end
  
    private
      
      def courseformat_params
        params.require(:courseformat).permit(:title, :description, :courseformats, :homepage_feature, :published_at, {:courseformat_ids => []}, 
          :workflow_state, :whats_new, :when_from, :when_to, :venue, :address1, :row_order_position, :address2, :city, :county, :country, :post_code, 
          photos_attributes: [:id, :caption, :image], highlights_attributes: [:title, :description])
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@courseformat.versions.last), :method => :post).html_safe
      end
      
      def load_courseformat
        @courseformat ||= Courseformat.friendly.find params[:id]
      end
  
  end
end
