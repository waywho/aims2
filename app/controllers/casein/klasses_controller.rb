# Scaffolding generated by Casein v5.1.1.5

module Casein
  class KlassesController < Casein::CaseinController
    before_filter :load_klass, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Klasses'
  		@klasses = Klass.rank(:row_order)
      respond_to do |format|
        format.html
        format.csv { send_data @klasses.to_csv, filename: "classes-#{Date.today}.csv"}
        format.xlsx
      end
    end
  
    def show
      @casein_page_title = 'View klass'
    end
  
    def new
      @casein_page_title = 'Add a new klass'
    	@klass = Klass.new
    end

    def create
      @klass = Klass.new klass_params
    
      if @klass.save
        if params[:publish]
            @klass.publish!
        end
        flash[:notice] = 'Klass created'
        redirect_to casein_klasses_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new klass'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update klass'
      
      respond_to do |format|
        if @klass.update_attributes klass_params
          if params[:submit]
            @klass.submit!
          elsif params[:approve]
            @klass.approve!
          elsif params[:reject]
            @klass.reject!
          elsif params[:publish]
            @klass.publish!
          elsif params[:unpublish]
            @course.unpublish!
          end
        
          format.html { redirect_to casein_klass_path(@klass), notice: "Klass has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this klass'
          render :action => :show
        end
     end    
    end

    def edit_multiple
      @klasses = Klass.where(id: klass_params[:klass_ids])

      if params[:edit]
        render "klasses/edit_multiple"
      elsif params[:unpublish]
        @klasses.each do |klass|
          klass.unpublish! if klass.published?
        end
        redirect_to casein_klasses_path
      elsif params[:publish]
        @klasses.each do |klass|
          klass.publish! if !klass.published?
        end
          redirect_to casein_klasses_path
      elsif params[:delete]
          @klasses.destroy_all
          redirect_to casein_klasses_path
      end
    end

    def update_multiple
      @klasses = Klass.friendly.update(params[:klasses].keys, params[:klasses].values)
      @klasses.reject! { |klass| klass.errors.empty? }
      if @klasses.empty?
        redirect_to casein_klasses_path
      else
        render "klasses/edit_multiple"
      end
    end
 
    def destroy

      @klass.destroy
      flash[:notice] = "Klass has been deleted #{undo_link}"
      redirect_to casein_klasses_path
    end
  
    private
      
      def klass_params
        params.require(:klass).permit(:title, :klasses, :row_order_position, {:klass_ids => []}, :published_at, :workflow_state, :description, :repertoire, :number_of_sessions, :session_of_day, :course_id)
      end

      def load_klass
        @klass ||= Klass.find params[:id]
      end

      def undo_link
        view_context.link_to("undo", revert_version_path(@klass.versions.last), :method => :post).html_safe
      end

  end
end