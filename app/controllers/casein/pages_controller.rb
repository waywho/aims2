# Scaffolding generated by Casein v5.1.1.5

module Casein
  class PagesController < Casein::CaseinController
    before_filter :load_page, :only => [:show, :update, :destroy]
  
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Pages'
      @pages = Page.order(sort_order(:title))
      respond_to do |format|
        format.html
        format.csv { send_data @pages.to_csv, filename: "pages-#{Date.today}.csv"}
        format.xlsx
      end
    end

    def import
      Page.import(params[:file])
      flash[:notice] = 'File has been imported'
      redirect_to casein_pages_path
    end
  
    def show
      @casein_page_title = 'View page'
      @courseformats = Courseformat.published_now
      @courses = Course.published_now
      @events = Event.published_now
      @fees = Fee.published_now
      @quotes = Quote.published_now
      @staffs = Staff.published_now
      @klasses = Klass.published_now
    end
  
    def new
      @casein_page_title = 'Add a new page'
      @page = Page.new
    end

    def create
      @page = Page.new page_params
    
      if @page.save
        if params[:publish]
            @page.publish!
        end
      expire_fragment("footer")
      expire_fragment("header")
        flash[:notice] = 'Page created'
        redirect_to casein_pages_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new page'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update page'
      
      respond_to do |format|
        if @page.update_attributes page_params
          if params[:submit]
            @page.submit!
          elsif params[:approve]
            @page.approve!
          elsif params[:reject]
            @page.reject!
          elsif params[:publish]
            @page.publish!
          elsif params[:unpublish]
            @page.unpublish!
          end
      expire_fragment("footer")
      expire_fragment("header")

          format.html { redirect_to casein_page_path(@page), notice: "Page has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this page'
          render :action => :show
        end
     end  
    end

    def edit_multiple
       @pages = Page.where(id: page_params[:page_ids])

      if params[:edit]
        render "pages/edit_multiple"
      elsif params[:unpublish]
        @pages.each do |page|
          page.unpublish! if page.published?
        end
        redirect_to casein_pages_path
      elsif params[:publish]
        @pages.each do |page|
          page.publish! if !page.published?
        end
          redirect_to casein_pages_path
      elsif params[:delete]
          @pages.destroy_all
          redirect_to casein_pages_path
      end
    end

    def update_multiple
      @pages = Page.friendly.update(params[:pages].keys, params[:pages].values)
      expire_fragment("footer")
      expire_fragment("header")
      @pages.reject! { |page| page.errors.empty? }
      if @pages.empty?
        redirect_to casein_pages_path
      else
        render "pages/edit_multiple"
      end
    end
 
    def destroy

      @page.destroy
      expire_fragment("footer")
      expire_fragment("header")
      flash[:notice] = "Page has been deleted #{undo_link}"
      redirect_to casein_pages_path
    end
  
    private
      
      def page_params
        params.require(:page).permit(:title, :content, :published_at, :feature, :keyword_list,
          :workflow_state, :feature_image, :pages, {:page_ids => []}, {:courseformat_ids => []}, {:course_ids =>[]}, 
            {:event_ids =>[]}, {:fee_ids =>[]}, {:klass_ids =>[]}, 
              {:quote_ids =>[]}, {:staff_ids =>[]})
      end

      def load_page
        @page ||= Page.friendly.find params[:id]
      end

      def undo_link
        view_context.link_to("undo", revert_version_path(@page.versions.last), :method => :post).html_safe
      end
  
  end
end
