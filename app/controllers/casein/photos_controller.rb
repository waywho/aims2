# Scaffolding generated by Casein v5.1.1.5

module Casein
  class PhotosController < Casein::CaseinController
    # before_filter :current_imageable
  
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Photos'
  		@photo = Photo.new
      @photos = Photo.order(sort_order(:caption)).paginate :page => params[:page]
      respond_to do |format|
        format.html
        format.json
        format.csv { send_data Photo.all.to_csv, filename: "photos-#{Date.today}.csv"}
        format.xlsx
      end
    end
    
    def import
      Photo.import(params[:file])
      flash[:notice] = 'File has been imported'
      redirect_to casein_photos_path
    end

    def show
      @casein_page_title = 'View photo'
      @photo = Photo.find params[:id]

      respond_to do |format|
        format.js
      end
    end
  
    def new
      @casein_page_title = 'Add a new photo'
    	@photo = Photo.new
    end

    def create
      @photo = Photo.new photo_params
     
      if @photo.save
        render json: @photo
      else
        flash.now[:warning] = 'There were problems when trying to add a new photo'
        render :action => :new
      end
    end

    # def imageable_create
    #   # @photo = Photo.new photo_params
    #   photo_params[:images].each do |image|
    #     @photo = Photo.new(image: image, imageable_id: photo_params[:imageable_id], imageable_type: photo_params[:imageable_type])
      
    #       if @photo.save
    #         flash[:notice] = "Photo(s) added"
    #         redirect_to current_imageable_path
    #       else
    #         flash.now[:warning] = 'There were problems when trying to add a new photo'
    #         render :action => :new
    #       end

    #   end
    # end
  
    def update
      @casein_page_title = 'Update photo'
      
      @photo = Photo.find params[:id]
    
      if @photo.update_attributes photo_params
        flash[:notice] = 'Photo has been updated'
        redirect_to casein_photos_path
      else
        flash.now[:warning] = 'There were problems when trying to update this photo'
        render :action => :show
      end
    end
 
    def destroy
      @photo = Photo.find params[:id]

      @photo.destroy
      flash[:notice] = 'Photo has been deleted'
      redirect_to casein_photos_path
    end

    def update_multiple
      @photos = Photo.where(id: photo_params[:photo_ids]).update_all(params[:imageable])

      redirect_to current_imageable_path
    end
  
    private
      
      def photo_params
        params.require(:photo).permit(:caption, {:photo_ids => []}, {:images => [] }, :image, :imageable_id, :imageable_type)
      end

      def current_imageable_path
          if params[:origin].present?
            origin = params[:origin]
            resource = origin['origin_type'].pluralize.downcase
            id = origin['origin_id']
            "/casein/#{resource}/#{id}"
          else
            imageable = params[:imageable]
            resource = imageable['imageable_type'].pluralize.downcase
            id = imageable['imageable_id']
            if resource == ""
              casein_photos_path
            else
              "/casein/#{resource}/#{id}"
            end
          end
      end

  end
end