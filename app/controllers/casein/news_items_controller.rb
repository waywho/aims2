# Scaffolding generated by Casein v5.1.1.5

module Casein
  class NewsItemsController < Casein::CaseinController
    before_filter :load_news_item, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'News items'
      @news_items = NewsItem.order(sort_order(:title)).paginate :page => params[:page]
      respond_to do |format|
        format.html
        format.csv { send_data @news_items.to_csv, filename: "news_items-#{Date.today}.csv"}
        format.xlsx
      end
    end
  
    def show
      @casein_page_title = 'View news item'
    end
  
    def new
      @casein_page_title = 'Add a new news item'
      @news_item = NewsItem.new
    end

    def create
      @news_item = NewsItem.new news_item_params
    
      if @news_item.save
        if params[:publish]
            @news_item.publish!
        end
        flash[:notice] = 'News item created'
        redirect_to casein_news_items_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new news item'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update news item'
      
      respond_to do |format|
        if @news_item.update_attributes news_item_params
          if params[:submit]  
            @news_item.submit!
          elsif params[:approve]
            @news_item.approve!
          elsif params[:reject]
            @news_item.reject!
          elsif params[:publish]
            @news_item.publish!
          elsif params[:unpublish]
            @news_item.unpublish!
          end
        
          format.html { redirect_to casein_news_item_path(@news_item), notice: "News item has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this news item'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @news_items = NewsItem.where(id: news_item_params[:news_item_ids])

      if params[:edit]
        render "news_items/edit_multiple"
      elsif params[:unpublish]
        @news_items.each do |news_item|
          news_item.unpublish! if news_item.published?
        end
        redirect_to casein_news_items_path
      elsif params[:publish]
        @news_items.each do |news_item|
          news_item.publish! if !news_item.published?
        end
          redirect_to casein_news_items_path
      elsif params[:delete]
          @news_items.destroy_all
          redirect_to casein_news_items_path
      end
    end

    def update_multiple
     @news_items = NewsItem.friendly.update(params[:news_items].keys, params[:news_items].values)
      @news_items.reject! { |news_item| news_item.errors.empty? }
      if @news_items.empty?
        redirect_to casein_news_items_path
      else
        render "news_items/edit_multiple"
      end
    end
 
    def destroy

      @news_item.destroy
      @news_item.photos.each do |photo|
        photo.update_attributes(imageable_id: nil, imageable_type: nil)
      end
      flash[:notice] = "News item has been deleted. #{undo_link}"
      redirect_to casein_news_items_path
    end
  
    private
      
      def news_item_params
        params.require(:news_item).permit(:title, :description, :published_at, :updated_at, :workflow_state, :news_items, :keyword_list, {:news_item_ids => []}, photo_attributes: [:id, :caption, :image, :_destroy])
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@news_item.versions.last), :method => :post).html_safe
      end
      
      def load_news_item
        @news_item = NewsItem.friendly.find params[:id]
      end
  
  end
end
