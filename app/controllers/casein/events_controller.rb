# Scaffolding generated by Casein v5.1.1.5

module Casein
  class EventsController < Casein::CaseinController
    before_filter :load_event, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Events'
      @events = Event.order(sort_order(:title)).paginate :page => params[:page]
    end
  
    def show
      @casein_page_title = 'View event'
      @pages = @event.pages
    end
  
    def new
      @casein_page_title = 'Add a new event'
      @event = Event.new
      @event.pages.build
      @pages = Page.published_now
    end

    def create
      @event = Event.new event_params
    
      if @event.save
        if params[:publish]
            @courseformat.publish!
        end
        flash[:notice] = 'Event created'
        redirect_to casein_events_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new event'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update event'
      
      respond_to do |format|
       if @event.update_attributes event_params

          if params[:submit]
            @event.submit!
          elsif params[:approve]
            @event.approve!
          elsif params[:reject]
            @event.reject!
          elsif params[:publish]
            @event.publish!
          elsif params[:unpublish]
            @event.unpublish!
          end

          format.html { redirect_to casein_event_path(@event), notice: "Event has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this event'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @events = Event.where(id: event_params[:event_ids])

      if params[:edit]
        render "events/edit_multiple"
      elsif params[:unpublish]
        @events.each do |event|
          event.unpublish! if event.published?
        end
        redirect_to casein_events_path
      elsif params[:publish]
        @events.each do |event|
          event.publish! if !event.published?
        end
          redirect_to casein_events_path
      elsif params[:delete]
          @events.destroy_all
          redirect_to casein_events_path
      end
    end

    def update_multiple
     @events = Event.friendly.update(params[:events].keys, params[:events].values)
      @events.reject! { |event| event.errors.empty? }
      if @events.empty?
        redirect_to casein_events_path
      else
        render "events/edit_multiple"
      end
    end
 
    def destroy

      @event.destroy
      @event.photo.destroy
      flash[:notice] = 'Event has been deleted. #{undo_link}"'
      redirect_to casein_events_path
    end
  
    private
      
      def event_params
        params.require(:event).permit(:title, :published_at, :description, :programme, :performers, :date, :workflow_state, :events, :ticket_type, 
          :venue, :address1, :address2, :city, :county, :country, :post_code, {:event_ids => []}, 
          {photo_attributes: [:id, :caption, :image, :_destroy]}, {:page_ids => []})
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@event.versions.last), :method => :post).html_safe
      end
      
      def load_event
        @event = Event.friendly.find params[:id]
      end
  
  end
end
