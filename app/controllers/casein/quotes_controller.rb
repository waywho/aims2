# Scaffolding generated by Casein v5.1.1.5

module Casein
  class QuotesController < Casein::CaseinController
    before_filter :load_quote, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Quotes'
      @quotes = Quote.order(sort_order(:saying)).paginate :page => params[:page]
    end
  
    def show
      @casein_page_title = 'View quote'
    end
  
    def new
      @casein_page_title = 'Add a new quote'
      @quote = Quote.new
    end

    def create
      @quote = Quote.new quote_params
    
      if @quote.save
        if params[:publish]
            @courseformat.publish!
        end
        flash[:notice] = 'Quote created'
        redirect_to casein_quotes_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new quote'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update quote'
      
      respond_to do |format|
        if @quote.update_attributes quote_params
          if params[:submit]          
            @quote.submit!
          elsif params[:approve]
            @quote.approve!
          elsif params[:reject]
            @quote.reject!
          elsif params[:publish]
            @quote.publish!
          elsif params[:unpublish]
            @quote.unpublish!
          end
        
          format.html { redirect_to casein_quote_path(@quote), notice: "Quote has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this quote'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @quotes = Quote.where(id: quote_params[:quote_ids])

      if params[:edit]
        render "quotes/edit_multiple"
      elsif params[:unpublish]
        @quotes.each do |quote|
          quote.unpublish! if quote.published?
        end
        redirect_to casein_quotes_path
      elsif params[:publish]
        @quotes.each do |quote|
          quote.publish! if !quote.published?
        end
          redirect_to casein_quotes_path
      elsif params[:delete]
          @quotes.destroy_all
          redirect_to casein_quotes_path
      end
    end

    def update_multiple
     @quotes = Quote.friendly.update(params[:quotes].keys, params[:quotes].values)
      @quotes.reject! { |quote| quote.errors.empty? }
      if @quotes.empty?
        redirect_to casein_quotes_path
      else
        render "quotes/edit_multiple"
      end
    end
 
    def destroy

      @quote.destroy
      @quote.photos.each do |photo|
        photo.update_attributes(imageable_id: nil, imageable_type: nil)
      end
      flash[:notice] = 'Quote has been deleted. #{undo_link}"'
      redirect_to casein_quotes_path
    end
  
    private
      
      def quote_params
        params.require(:quote).permit(:saying, :author, :published_at, :updated_at, :workflow_state, :quotes, {:quote_ids => [] })
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@quote.versions.last), :method => :post).html_safe
      end
      
      def load_quote
        @quote = Quote.find params[:id]
      end
  
  end
end
