# Scaffolding generated by Casein v5.1.1.5

module Casein
  class StaffsController < Casein::CaseinController
    before_filter :load_staff, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Staffs'
      @staffs = Staff.order(sort_order(:last_name)).paginate :page => params[:page]
      respond_to do |format|
        format.html
        format.csv { send_data @staffs.to_csv, filename: "staffs-#{Date.today}.csv"}
        format.xlsx
      end
    end

    def import
      Staff.import(params[:file])
      flash[:notice] = 'File has been imported'
      redirect_to casein_staffs_path
    end

    def publish_index
      @casein_page_title = 'Staffs: Publish Index'
      @staffs = Staff.order(sort_order(:last_name))
    end
  
    def show
      @casein_page_title = 'View staff'
    end
  
    def new
      @casein_page_title = 'Add a new staff'
      @staff = Staff.new
    end

    def create
      @staff = Staff.new staff_params
    
      if @staff.save
        if params[:publish]
            @staff.publish!
        end
        flash[:notice] = 'Staff created'
        redirect_to casein_staffs_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new staff'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update staff'
       respond_to do |format|

        if @staff.update_attributes staff_params

          if params[:submit]
            @staff.submit!
          elsif params[:approve]
            @staff.approve!
          elsif params[:reject]
            @staff.reject!
          elsif params[:publish]
            @staff.publish!
          elsif params[:unpublish]
            @staff.unpublish!
          end
        
          format.html { redirect_to casein_staff_path(@staff), notice: "Staff has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this staff'
          render :action => :show
        end
     end
    end

    def edit_multiple
      @staffs = Staff.where(id: staff_params[:staff_ids])

      if params[:edit]
        render "staffs/edit_multiple"
      elsif params[:unpublish]
        @staffs.each do |staff|
          staff.unpublish! if staff.published?
        end
        redirect_to casein_staffs_path
      elsif params[:publish]
        @staffs.each do |staff|
          staff.publish! if !staff.published?
        end
          redirect_to casein_staffs_path
      elsif params[:delete]
          @staffs.destroy_all
          redirect_to casein_staffs_path
      end
    end

    def update_multiple
      @staffs = Staff.friendly.update(params[:staffs].keys, params[:staffs].values)
      @staffs.reject! { |staff| staff.errors.empty? }
      if @staffs.empty?
        redirect_to casein_staffs_path
      else
        render "staffs/edit_multiple"
      end
    end
 
    def destroy
      @staff.destroy
      @staff.photo.destroy
      flash[:notice] = "Staff has been deleted #{}"
      redirect_to casein_staffs_path
    end
  
    private
      
      def staff_params
        params.require(:staff).permit(:last_name, :first_name, :staffs, { :staff_ids => [] }, :published_at, :biography, :role, :photo, :speciality_list, :published_at, :workflow_state, photo_attributes: [:id, :caption, :image, :_destroy])
      end

      def load_staff
        @staff ||= Staff.friendly.find params[:id]
      end

      def undo_link
        view_context.link_to("undo", revert_version_path(@staff.versions.last), :method => :post).html_safe
      end
  
  end
end
