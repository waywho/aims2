# Scaffolding generated by Casein v5.1.1.5

module Casein
  class CoursesController < Casein::CaseinController
    before_filter :load_course, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Courses'
  		@courses = Course.order(sort_order(:title)).paginate :page => params[:page]
    end
  
    def show
      @casein_page_title = 'View course'
      @photos = Photo.all
      @photo = Photo.new
    end
  
    def new
      @casein_page_title = 'Add a new course'
    	@course = Course.new
      @photo = @course.photos.build
    end

    def create
      @course = Course.new course_params
    
      if @course.save
          if params[:photos_attributes]
            params[:photos_attributes]['image'].each do |image|
              @course.photos.create(image: image)
            end
          end
        flash[:notice] = 'Course created'
        redirect_to casein_courses_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new course'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update course'
            
      respond_to do |format|
        
          if params[:submit]
            @course.submit!
          elsif params[:approve]
            @course.approve!
          elsif params[:reject]
            @course.reject!
          elsif params[:publish]
            @course.publish!
          elsif params[:unpublish]
            @course.unpublish!
          end

        if @course.update_attributes course_params
        
          format.html { redirect_to casein_course_path(@course), notice: "Course has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this course'
          render :action => :show
        end
     end
    end

    def edit_multiple
      @courses = Course.where(id: course_params[:course_ids])

      if params[:edit]
        render "courses/edit_multiple"
      elsif params[:unpublish]
        @courses.each do |course|
          course.unpublish! if course.published?
        end
        redirect_to casein_courses_path
      elsif params[:publish]
        @courses.each do |course|
          course.publish! if !course.published?
        end
          redirect_to casein_courses_path
      elsif params[:delete]
          @courses.destroy_all
          redirect_to casein_courses_path
      end
    end

    def update_multiple
     @courses = Course.friendly.update(params[:courses].keys, params[:courses].values)
      @courses.reject! { |course| course.errors.empty? }
      if @courses.empty?
        redirect_to casein_courses_path
      else
        render "courses/edit_multiple"
      end
    end

    def destroy
      @course.photos.each do |photo|
        photo.update_attributes(imageable_id: nil, imageable_type: nil)
      end
      @course.destroy
      flash[:notice] = "Course has been deleted. #{undo_link}"
      redirect_to casein_courses_path
    end
  
    private
      
      def course_params
        params.require(:course).permit(:title, :courses, :workflow_state, {:course_ids => []}, :description, photos_attributes: [:id, :caption, :course_id, :image])
      end

      def undo_link
        view_context.link_to("undo", revert_version_path(@course.versions.last), :method => :post).html_safe
      end

      def load_course
        @course ||= Course.friendly.find params[:id]      
      end

  end
end