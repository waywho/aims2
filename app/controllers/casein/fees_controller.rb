# Scaffolding generated by Casein v5.1.1.5

module Casein
  class FeesController < Casein::CaseinController
    before_filter :load_fee, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Fees'
      @fees = Fee.order(sort_order(:courseformat_id)).paginate :page => params[:page]
      respond_to do |format|
        format.html
        format.csv { send_data Fee.all.to_csv, filename: "fees-#{Date.today}.csv"}
        format.xlsx
      end
    end


    def import
      Fee.import(params[:file])
      flash[:notice] = 'File has been imported'
      redirect_to casein_fees_path
    end
  
    def show
      @casein_page_title = 'View fee'
    end
  
    def new
      @casein_page_title = 'Add a new fee'
      @fee = Fee.new
    end

    def create
      @fee = Fee.new fee_params
    
      if @fee.save
        if params[:publish]
            @fee.publish!
        end
        flash[:notice] = 'Fee created'
        redirect_to casein_fees_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new fee'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update fee'
      
      respond_to do |format|
        if @fee.update_attributes fee_params
          if params[:submit]
            @fee.submit!
          elsif params[:approve]
            @fee.approve!
          elsif params[:reject]
            @fee.reject!
          elsif params[:publish]
            @fee.publish!
          elsif params[:unpublish]
            @fee.unpublish!
          end
          format.html { redirect_to casein_fee_path(@fee), notice: "Fee has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this fee'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @fees = Fee.where(id: fee_params[:fee_ids])

      if params[:edit]
        render "fees/edit_multiple"
      elsif params[:unpublish]
        @fees.each do |fee|
          fee.unpublish! if fee.published?
        end
        redirect_to casein_fees_path
      elsif params[:publish]
        @fees.each do |fee|
          fee.publish! if !fee.published?
        end
          redirect_to casein_fees_path
      elsif params[:delete]
          @fees.destroy_all
          redirect_to casein_fees_path
      end
    end

    def update_multiple
     @fees = Fee.update(params[:fees].keys, params[:fees].values)
      @fees.reject! { |fee| fee.errors.empty? }
      if @fees.empty?
        redirect_to casein_fees_path
      else
        render "fees/edit_multiple"
      end
    end
 
    def destroy

      @fee.destroy
      # @fee.photos.each do |photo|
      #   photo.update_attributes(imageable_id: nil, imageable_type: nil)
      # end
      flash[:notice] = "Fee has been deleted. #{undo_link}"
      redirect_to casein_fees_path
    end
  
    private
      
      def fee_params
        params.require(:fee).permit(:fee_type, :published_at, :category, :description, :fees, {:fee_ids => []}, :amount, :workflow_state, :eventable_id, :eventable_type, :updated_at)
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@fee.versions.last), :method => :post).html_safe
      end
      
      def load_fee
        @fee ||= Fee.find params[:id]
      end
  
  end
end
