<% meta title: "Booking",
	keywords: "#w{booking course}" %>
<h1>Bookings</h1>

<%= simple_form_for :booking, :url => bookings_path, :method => 'post', html: {:id => 'booking_form'} do |f| %>

<div class = 'row'>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-6 col-lg-6'>

		<%= f.input :campaign_id, label: 'I would like to book...' do %>
			<%= f.select :campaign_id, @campaigns.map { |c| [c.Name, c.Id, {'data-type' => c.Sub_Type__c}]}, {include_blank: 'Select a Course'}, {:class => 'form-control campaign-select', required: true } %>
		<% end %>
	</div>
</div>
<div class = 'row'>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-6 col-lg-6'>
		<div class = 'row'>
			<div class = 'col-xs-12 col-sm-6 col-md-4 col-lg-4'>
				<%= f.input :salutation, collection: ["Mr.", "Ms.", "Mrs.", "Dr.", "Prof."] %>
			</div>
			<div class = 'col-xs-12 col-sm-6 col-md-8 col-lg-8'>
				<%= f.input :first_name, as: :string, required: true %>
			</div>
		</div>
			<%= f.input :last_name, as: :string, required: true %>
			<%= f.input :street_address, required: false %>
		<div class = 'row'>
			<div class = 'col-xs-12 col-sm-6 col-md-6 col-lg-6'>
				<%= f.input :city, required: false %>
			</div>
			<div class = 'col-xs-12 col-sm-6 col-md-6 col-lg-6'>
				<%= f.input :county, required: false %>
			</div>
		</div>
		<div class = 'row'>
			<div class = 'col-xs-12 col-sm-6 col-md-6 col-lg-6'>
				<%= f.input :country, required: false %>
			</div>

			<div class = 'col-xs-12 col-sm-6 col-md-6 col-lg-6'>
				<%= f.input :post_code, required: false %>
			</div>
		</div>
	</div>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-6 col-lg-6'>
		<%= f.input :email, required: true %>
		<%= f.input :preferred_contact, collection: @preferred_phone_values, label: 'Preferred contact', value_method: :value, label_method: :label, required: true %>
		<%= f.input :contact_number, required: false %>
		<%= f.input :date_of_birth, required: false %>
		<%= f.input :voice_type, collection: @voice_types, value_method: :value, label_method: :label, required: true %>
	</div>
</div>
<br />

<div class = 'course-options' id = "Summer">
	<div class = 'row'>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-6 col-md-6 col-lg-6'>
			<%= f.input :car_reg, label: 'Car Registration (optional)', required: false %>
		</div>
	</div>
	<div class = 'row booking-sections'>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12'>
			<h2>Summer School Options</h2>
		</div>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-6 col-md-6 col-lg-6'>
			<%= f.input :course_stream_summer, collection: find_soap_field(@opportunity, 'Course__c'), label_method: :label, value_method: :value, include_blank: 'Select a course', label: 'Course Stream', input_html: { :id => 'summer-course-select'}, required: false %>
		</div>


	</div>
	<div class = 'row course-booking Solo Crossover'>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12'>
			<h3 class = 'inline-title'>Solo Classes</h3><span class = 'instruction'> (All students enrolled on the SOLO course should select Solo Vocal Techniuqe class and up to 3 additional options)</span>
		</div>
		<br />
		<br />
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12'>
			<%= f.collection_check_boxes :solo_classes, find_soap_field(@opportunity, 'Solo_classes__c'), :value, :label, :include_hidden => false, item_wrapper_class: 'solo-select', required: false %>
		</div>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-6 col-md-6 col-lg-6'>
			<%= f.input :notes_for_class_selection, label: 'Choice 4 (optional)', hint: '(Replace with this option if any of my selections are not availble)', required: false %>
		</div>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12' id = 'add-on'>
			(optional) I would like to supplement my Solo classes with <%= link_to 'Choral or Ensemble Classes', '#', :class => 'supplement btn btn-success btn-xs' %>
		</div>
	</div>

	<div class = 'row course-booking Choral Crossover'>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12'>
			<h3 class = 'inline-title'>Choral and Ensemble Classes</h3><span class = 'instruction'> (please select 1 from each session)</span>
		</div>
		<br />
		<br />
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-3 col-md-3 col-lg-3 session'>
			<%= f.input :session_1, collection: find_soap_field(@opportunity, 'Session_1__c'), label_method: :label, value_method: :value, input_html: { :class => 'session-select'}, required: false %>
			<% find_soap_field(@opportunity, 'Session_1__c').each do |selection| %>
				<% if sf_session_options(@opportunity.fields, selection.value, 'Session_1__c', @client).present? %>
					<div class = 'session-options' data-selection='<%= selection.value %>'>
						<span class='instruction'>Select either or both of the following options.</span><br />
						<%= f.collection_check_boxes :session_1_options, sf_session_options(@opportunity.fields, selection.value, 'Session_1__c', @client), :value, :label, :include_hidden => false, required: false %>
					</div>
				<% end %>
			<% end %>
		</div>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-3 col-md-3 col-lg-3 session'>
			<%= f.input :session_2, collection: find_soap_field(@opportunity, 'Session_2__c'), label_method: :label, value_method: :value, input_html: { :class => 'session-select'}, required: false %>
			<% find_soap_field(@opportunity, 'Session_2__c').each do |selection| %>
				<% if sf_session_options(@opportunity.fields, selection.value, 'Session_2__c', @client).present? %>
					<div class = 'session-options' data-selection='<%= selection.value %>'>
						<span class='instruction'>Select either or both of the following options.</span><br />
						<%= f.collection_check_boxes :session_2_options, sf_session_options(@opportunity.fields, selection.value, 'Session_2__c', @client), :value, :label, :include_hidden => false, required: false %>
					</div>
				<% end %>
			<% end %>
		</div>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-3 col-md-3 col-lg-3 session'>
			<%= f.input :session_3, collection: find_soap_field(@opportunity, 'Session_3__c'), label_method: :label, value_method: :value, input_html: { :class => 'session-select'}, required: false %>
			<% find_soap_field(@opportunity, 'Session_3__c').each do |selection| %>
				<% if sf_session_options(@opportunity.fields, selection.value, 'Session_3__c', @client).present? %>
					<div class = 'session-options' data-selection='<%= selection.value %>'>
						<span class='instruction'>Select either or both of the following options.</span><br />
						<%= f.collection_check_boxes :session_3_options, sf_session_options(@opportunity.fields, selection.value, 'Session_3__c', @client), :value, :label, :include_hidden => false, required: false %>
					</div>
				<% end %>
			<% end %>
		</div>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-3 col-md-3 col-lg-3 session'>
			<%= f.input :session_4, collection: find_soap_field(@opportunity, 'Session_4__c'), label_method: :label, value_method: :value, input_html: { :class => 'session-select'}, required: false %>
			<% find_soap_field(@opportunity, 'Session_4__c').each do |selection| %>
				<% if sf_session_options(@opportunity.fields, selection.value, 'Session_4__c', @client).present? %>
					<div class = 'session-options' data-selection='<%= selection.value %>'>
						<span class='instruction'>Select either or both of the following options.</span><br />
						<%= f.collection_check_boxes :session_4_options, sf_session_options(@opportunity.fields, selection.value, 'Session_4__c', @client), :value, :label, :include_hidden => false, required: false%>
					</div>
				<% end %>
			<% end %>
		</div>
	</div>

	<div class = 'row'>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-6 col-md-6 col-lg-6 audition'>
			<h3>Audition</h3>
			<span>I would like to be considered for (please tick all that apply):</span><br />
			<br />
			<%= f.collection_check_boxes :audition_for, find_soap_field(@opportunity, 'Auditioning_for__c'), :value, :label, required: false %><br />
			<br />
			<span>I would like to attend the audition on <%= @audition_date.strftime("%A, %d %B, %Y") if @audition_date %>: </span> <br />
			<br />
			<%= f.input :audition, collection: find_soap_field(@opportunity, 'Audition_requested__c'), label_method: :label, value_method: :value, label: false, include_blank: 'Select an audition time', required: false %>
		</div>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-6 col-md-6 col-lg-6 audition-notes'>
			<h3>Audition Recording/Notes</h3>
			<span>If you would like to be considered for Solo, Masterclass, or Bursary but cannot audition in person, please send us recordings, either via email or paste the links below:</span> <br />
			<%= f.input :audition_notes, as: :text, label: false, required: false %>
		</div>
	</div>
	<div class = 'row'>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12'>
			<h3>Accommodation/Visitor Options</h3>
		</div>
		<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12'>
			<%= f.input :summer_product_code, required: false, label: false do %>
				<%= f.select :summer_product_code, @summer_fees.map { |sf| [sf.full_description, sf.product_code, {'data-amount' => sf.amount}]}, {include_blank: 'Select an option'}, {:class => 'form-control fee-select', :id => 'Summer-fee'} %>
			<% end %>
		</div>
	</div>
</div>

<div class = 'row course-options booking-sections' id = 'Taster'>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12'>
		<h2>Mini-Aims Course Options</h2>
	</div>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-6 col-lg-6'>
			<%= f.input :course_stream_mini, collection: ['Solo', 'Choral'], include_blank: 'Select a course', label: 'Course Stream', input_html: { :class => 'course-select'}, required: true %>
	</div>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-6 col-md-6 col-lg-6'>
		<%= f.input :days, collection: ['Saturday', 'Sunday'], as: :check_boxes, label: 'I would like to attend...', required: true %>
	</div>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12'>
		<%= f.input :taster_product_code, label: 'Fee', required: false do %>
			<%= f.select :taster_product_code, @mini_fees.map { |sf| [sf.full_description, sf.product_code, {'data-amount' => sf.amount}]}, {include_blank: 'Select an option'}, {:class => 'form-control fee-select', :id => 'Taster-fee'} %>
		<% end %>
	</div>
</div>
<div class = 'row booking-sections'>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-12 col-lg-12'>
		<h3>Payment</h3>
	</div>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-6 col-lg-6'>
			<div id = 'little-warning'></div>
			<%= f.input :stage, collection: ['Full Amount', 'Deposit'], as: :radio_buttons, label: 'I would like to pay...', input_html: { :class => 'payment-stage btn-primary'}, required: true %>
			<div class = 'agreement'>
				<%= f.input :agreement, as: :boolean, label: "I enclose my deposit of £75 (non-refundable) and I understand to pay the remainder of 50% of my fees by 1 May 2016 and the blance by 30 June 2016." %>
			</div>
			<div class = 'bill'>
				<%= f.input :sub_total, label: false, wrapper_html: {:class => 'line-item'}, wrapper: :vertical_input_group do %>
					<span class="input-group-addon line-header" id = "sub-total-addon">Sub Total:</span>
					<span class="input-group-addon">£</span>
					<%= f.input_field :sub_total, required: false, as: :float, id: 'sub-total', :class => 'form-control', :readonly => true %>
				<% end %>

				<%= f.input :service_fee, label: false, wrapper_html: {:class => 'line-item'}, wrapper: :vertical_input_group do %>
					<span class="input-group-addon line-header" id = "service-charge-addon">Service Charge:</span>
					<span class="input-group-addon">£</span>
					<%= f.input_field :service_fee, required: false, as: :float, id: 'service-charge-input', :class => 'form-control', :readonly => true %>
				<% end %>

				<%= f.input :payment_amount, label: false, wrapper_html: {:id => 'grand-total-line'}, wrapper: :vertical_input_group do %>
					<span class="input-group-addon line-header" id = "total-header">Amount due:</span>
					<span class="input-group-addon">£</span>
					<%= f.input_field :payment_amount, required: false, as: :float, id: 'payment-amount-input', :class => 'form-control', :readonly => true %>
				<% end %>
			</div>
			<br />
			<br />
	</div>
	<div class = 'col-xs-offset-1 col-xs-10 col-sm-offset-0 col-sm-12 col-md-6 col-lg-6'>
		<b>Pay by...</b>
			<div class="btn-group payment-type-buttons" data-toggle="buttons">
			  <label class="btn btn-default active">
			    <input type="radio" name="options" id="option1" autocomplete="off" value='credit' checked = 'checked'> Credit Cards
			  </label>
			  <label class="btn btn-default">
			    <input type="radio" name="options" id="option2" autocomplete="off" value='bank'> Bank Transfer
			  </label>
			</div>
			<br />
			<br />
		<div class = 'pay-stripe'>
			<%= render :partial => "bookings/creditcard_form", :locals => { :f => f } %>
		</div>
		<div class = 'pay-bank'>
			<%= @bank_details_page.content.html_safe if @bank_dertails_page %>
			<br />
			<p>
			Pressing the 'Submit Booking' button will make a <i><b>tentative booking</b></i>. Booking will be confirmed once your payment has been received.
			</p>
			<br />
				<%= f.submit "Submit Booking", name: 'bank_booking', :class => 'btn btn-primary pull-right', :id => 'bankSubmit', :disabled => true %>
		</div>
	</div>
</div>
<% end %>
<script type="text/javascript" src="https://js.stripe.com/v2/"></script>
<script>
	Stripe.setPublishableKey("<%= Rails.configuration.stripe[:publishable_key] %>")
	$(function() {
		function isInEU(country) {
			return $.inArray(country, ["AT", "BE", "DE", "DK", "ES", "FI", "FR", "GB", "IE", "IT", "LU", "NL", "NO", "SE"]) > -1;
		};
		function stripeResponseHandler(status, response) {
		  var $form = $('#booking_form');

		  if (response.error) {
		    // Show the errors on the form
		    $form.find('.payment-errors').text(response.error.message);
		    $form.find('button').prop('disabled', false);
		  } else {
		    // response contains id and card, which contains additional card details
		    var token = response.id;
		    console.log(response.card.country);
		    var tokenCountry = response.card.country;
		    var amount = parseFloat($('#sub-total').val());
		    set_amount_due_with_service(amount, tokenCountry);

		    // Insert the token into the form so it gets submitted to the server
		    // Disable the submit button to prevent repeated clicks
			
			$('#stripeButton').prop('disabled', false);
		    $form.append($('<input type="hidden" name="stripeToken" />').val(token));
		    // and submit
		    // $form.get(0).submit();
		  }
		};

		// function calculate() {
		// 	var $form = $('#booking_form');
		// 	Stripe.card.createToken($form, stripeResponseHandler);

		// 	// Prevent the form from submitting with the default action
		// 	return false;

		// };
		function resetSummerClasses() {
			// $('#summer-course-select').val("");
			$('.solo-select input:checked').removeAttr('checked');
			$('#booking_notes_for_class_selection').val("");
			$('.session select').val("");
			$('.session input:checked').removeAttr('checked');
			$('.session-options').hide('slow');
		};

		function resetSummerOptions() {
			$('.audition input[type=checkbox]:checked').removeAttr('checked');
			$('.audition select').val("");
			$('#Summer-fee').val("");
		};

		function resetBill() {
			$('#sub-total').empty();
			$('#service-charge-input').empty();
			$('#payment-amount-input').empty();
		};
		
		function set_amount_due_with_service(amount, country) {
			if(isInEU(country)) {
				var chargeAmount = (amount + 0.2) / (1 - 0.014)
				var service = chargeAmount - amount
			} else {
				var chargeAmount = (amount + 0.2) / (1 - 0.029)
				var service = chargeAmount - amount
			}

			// $('#sub-total').text(amount);
			$('#service-charge-input').val((service).toFixed(2));
			$('#payment-amount-input').val((chargeAmount).toFixed(2));
		};

		function set_amount_due_no_service(amount) {
			$('#sub-total').val(amount);
			$('#payment-amount-input').val(amount);
		};

		// disable calculate button
		$('#calculate').prop('disabled', true);
		// show choral class options if "and or" options are selected
		if($(".session-select").val()) {
			$("div[data-selection='" + $(".session-select").val() + "']").show('slow');
		};

		// reset "and or" options if choral class options are changed
		$(".session-select").change(function() {
			$(this).closest('.session').find('.input:checked').removeAttr('checked');
			$(this).closest('.session').children('.session-options').hide('slow');
			$("div[data-selection='" + $(this).val() + "']").show('slow');
		})

		// show Summer or Taster section of the booking form based on Booking Campaign Id
		$("#booking_campaign_id").change(function() {
			$(".course-options").hide('slow');
			$("#" + $(this).find(':selected').data("type")).show('slow');
			resetBill();
			$('.payment-stage').prop('checked', false);
			$('#booking_course').val("");
			resetSummerClasses();
			resetSummerOptions();
			$('#Taster select').val("");
			$('#Taster input:checked').removeAttr('checked');
			if($(this).find(':selected').data("type") == 'Taster') {
				$('#booking_stage_full_amount').prop('checked', true)
				$('.payment-stage').prop('disabled', true);
			} else if ($(this).find(':selected').data("type") == 'Summer') {
				$('.payment-stage').prop('disabled', false);
			}

		})

		// limit 4 selections only
		$('.solo-select input[type=checkbox]').change(function(e){
		   if ($('.solo-select input[type=checkbox]:checked').length > 4) {
		        $(this).prop('checked', false)
		        alert('You cannot select more than 4 classes.');
		   }
		})

		// reset all options if summer course stream (solo, choral, cross offer...etc) options changed
		$('#summer-course-select').change(function() {
			resetSummerClasses();
			$('.course-booking').hide('slow');

			$("." + $(this).val()).show('slow');
		})

		// show choral options
		$('.supplement').click(function(event) {
			$('.Choral').show('slow');
			event.preventDefault();
		})

		// when 'Full Amount' or 'Deposit' is selected on Payment-Stage, set amount based on payment type
		$('.payment-stage').click(function() {
			resetBill();
			$('#little-warning').empty();
			if ($(this).val() ==  'Full Amount') { 
				var campaign = $('#booking_campaign_id').val();
				var validator = $('#booking_form').validate();
				$('.agreement').hide('slow');

				// console.log ($('.campaign-select').find(':selected').data("type") );
				if (validator.element('#booking_campaign_id')) {
					if ($('#booking_campaign_id').find(':selected').data("type") == 'Summer') {
						// console.log($('#Summer-fee').find(':selected').val());

						if (!$('#Summer-fee').find(':selected').val()) {
							$("#Summer-fee").addClass('warning-box');
							$('#little-warning').text('Please select an Accommodation/Vistor option first.');
							$("#Summer-fee").before("<span class = 'warning'>Please select an option first</div>");
							$("#Summer-fee").focus();
						} else {
							var amount = $('#Summer-fee').find(':selected').data('amount');
							console.log(amount);
							if($('.payment-type-buttons input:radio:checked').val() == 'credit') {
								// console.log(amount);
								$('#sub-total').val(amount);
								$('#calculate').prop('disabled', false);
							} else {
								// console.log(amount);
								set_amount_due_no_service(amount);
								$('#bankSubmit').prop('disabled', false);
							}
						}

					} else if ($('#booking_campaign_id').find(':selected').data("type") == 'Taster') {
						console.log($('#Taster-fee').find(':selected').val());
						if (!$('#Taster-fee').find(':selected').val()) {
							$("#Taster-fee").addClass('warning-box');
							$('#little-warning').text('Please select a Fee option first.');
							$("#Taster-fee").before("<span class = 'warning'>Please select an option first</div>");
							$('#Taster-fee').focus();
						} else {
							var amount = $('#Taster-fee').find(':selected').data('amount');
							if($('.payment-type-buttons input:radio:checked').val() == 'credit') {
								// console.log(amount);
								$('#sub-total').val(amount);
								$('#calculate').prop('disabled', false);
							} else {
								// console.log(amount);
								set_amount_due_no_service(amount);
								$('#bankSubmit').prop('disabled', false);
							}						
						}
					}
				} else {
					$('#little-warning').text('Please select a Summer or Mini-AIMS course first.');
					$('#booking_campaign_id').focus;
				}
			} else if ($(this).val() == 'Deposit') {

				var amount = 75.00
				// console.log('75.00')

				if($('.payment-type-buttons input:radio:checked').val() == 'credit') {
						// console.log(amount);
						$('#sub-total').val(amount);
						$('#calculate').prop('disabled', false);
					} else {
						// console.log(amount);
						set_amount_due_no_service(amount);
						$('#bankSubmit').prop('disabled', false);
					};				
				$('.agreement').show('slow');
			};
		})
		
		// set amount in 'bill' if fee-select is changed based on Payment Stage ("Full Amount", "Deposit")
		$('.fee-select').change(function() {
			// console.log($('.booking_stage').find(':checked').val());
			if ($('.booking_stage').find(':checked').val() == 'Full Amount') {
				var amount = $(this).find(':selected').data("amount");
				// console.log(amount);
				resetBill();
				if($('.payment-type-buttons input:radio:checked').val() == 'credit') {
						// console.log(amount);
						$('#sub-total').val(amount);
						$('#calculate').prop('disabled', false);
					} else {
						// console.log(amount);
						set_amount_due_no_service(amount);
						$('#bankSubmit').prop('disabled', false);
					}
				$('.warning').remove();
				$(this).removeClass('.warning-box');
			}
		});

		// if Payment Type options ("Credit Cards or Bank Transfer") changed, reset amount
		$('.payment-type-buttons').change(function() {
			// console.log($('.payment-type-buttons input:radio:checked').val());
			resetBill();
			var amount = $('.fee-select').find(':selected').data("amount");
			if($('.payment-type-buttons input:radio:checked').val() == 'credit') {
				$('.pay-stripe').slideDown("slow");
				$('.pay-bank').slideUp("slow");
				if(amount) {
					$('#sub-total').val(amount);
					$('#calculate').prop('disabled', false);
				}
				
			} else {
				$('.pay-stripe').slideUp("slow");
				$('.pay-bank').slideDown("slow");
				if(amount) {
					set_amount_due_no_service(amount);
					$('#bankSubmit').prop('disabled', false);
				}
			}
		});

		// validate booking form on submit
		$('#booking_form').validate({
			errorClass: 'invalid',
			errorPlacement: function(error, element) {
				error.appendTo($("label[for='" + element.attr('id') + "']"));
			}
		});

		$("#booking_card_number").payment('formatCardNumber');
		$("#booking_cvc").payment('formatCardCVC');

		// calculate service charge based on country
		$('#calculate').click(function(event) {
			event.preventDefault();
			var $form = $('#booking_form');
			var month = $("#booking_month").val();
			var year = $("#booking_year").val();
			var cvc = $("#booking_cvc").val();
			var cardNumber = $("#booking_card_number").val();
			if (!$.payment.validateCardNumber(cardNumber)) {
				$("#booking_card_number").addClass('warning-box');
				$("#booking_card_number").before("<span class = 'warning'>Please enter a valid number</div>");
				$('#booking_card_number').focus();
			} else if (!$.payment.validateCardCVC(cvc)) {
				$("#booking_cvc").addClass('warning-box');
				$("#booking_cvc").before("<span class = 'warning'>Invalid</div>");
				$('#booking_cvc').focus();
			} else if (!$.payment.validateCardExpiry(month, year)) {
				$("#booking_year").addClass('warning-box');
				$("#valid-date").text("Please enter a valid date");
			} else {
				Stripe.card.createToken($form, stripeResponseHandler);
			}

			// Prevent the form from submitting with the default action
			return false;
		})


	})
</script>
